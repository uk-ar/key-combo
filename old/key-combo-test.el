(require 'ert)
(require 'el-spec)

(require 'key-combo)
(key-combo-load-default)

(defun test1()
  (interactive)
  (message "test1")
  )

(defun test2()
  (interactive)
  (message "test2")
  )

(defun key-combo-test-helper-execute (cmd)
  (key-combo-mode 1)
  (execute-kbd-macro (key-combo-read-kbd-macro cmd))
  (substring-no-properties (buffer-string)))

(defun key-combo-test-helper-define-lookup (cmd)
  (key-combo-define-global ">>" cmd)
  (key-combo-key-binding ">>"))

(defun key-combo-test-helper-binding-execute (cmd)
  (key-combo-command-execute (key-combo-key-binding cmd))
  (substring-no-properties (buffer-string)))

(dont-compile
  (when (fboundp 'describe)
    (describe ("key-combo in temp-buffer" :vars ((mode)))
      (shared-examples "check pre-command-hook"
        (it ()
          (key-combo-mode 1)
          (should (memq 'key-combo-pre-command-function pre-command-hook)))
        (it ()
          (key-combo-mode -1)
          (should-not (memq 'key-combo-pre-command-function pre-command-hook))))
      (shared-examples "C-a"
        (before
          (insert "B\n IP")
          (key-combo-mode 1))
        (it ()
          (should (key-combo-key-binding (kbd "C-a C-a"))))
        ;; (it ()
        ;;   (key-combo-mode -1)
        ;;   (should-not (key-combo-key-binding (kbd "C-a C-a"))))
        (it ()
          (key-combo-test-helper-execute "C-a")
          (should (equal (char-to-string (following-char)) "I")))
        (it ()
          (key-combo-test-helper-execute "C-a C-a")
          (should (equal (char-to-string (following-char)) " ")))
        (it ()
          (key-combo-test-helper-execute "C-a C-a C-a")
          (should (equal (char-to-string (following-char)) "B")))
        ;; fail in temp buffer?
        ;; (it (:vars ((cmd "C-a C-a C-a C-a")))
        ;;   (backward-char)
        ;;   (should (equal (char-to-string (following-char)) "P")))
        )

      (around
        (setq key-combo-command-keys nil)
        (with-temp-buffer
          (switch-to-buffer (current-buffer))
          (let ((key-combo-mode-map
                 (copy-keymap key-combo-mode-map))
                (global-map-org (current-global-map))
                (global-map (copy-keymap (current-global-map))))
            (unwind-protect
                (progn
                  (use-global-map global-map)
                  (funcall el-spec:example))
              (use-global-map global-map-org)))))

      (it ()
        (key-combo-test-helper-execute "C-a C-a")
        (should (equal (char-to-string (following-char)) " "))
        (should (eq real-last-command 'move-beginning-of-line))
        )
      (it ()
        (key-combo-test-helper-execute "C-a C-a C-a")
        (should (equal (char-to-string (following-char)) "B"))
        (should (eq real-last-command 'beginning-of-buffer))
        )
      (it ()
        (key-combo-test-helper-execute "C-a C-p"))
      ;; fail in temp buffer?
      ;; (it (:vars ((cmd "C-a C-a C-a C-a")))
      ;;   (backward-char)
      ;;   (should (equal (char-to-string (following-char)) "P")))

      (context "in default-mode"
        (context "execute"
          (it ()
            (should (string= (key-combo-test-helper-execute ">") ">")))
          (it ()
            (should (string= (key-combo-test-helper-execute "=") "="))))
        (context "no execute"
          (it ()
            (key-combo-command-execute (lambda () (insert "a")))
            (should (string= (buffer-string) "a")))
          (it ()
            (should-error (key-combo-command-execute 'wrong-command)))
          (it ()
            (let ((last-command-event ?b))
              (key-combo-command-execute 'self-insert-command))
            (should (string= (buffer-string) "b")))
          (it ()
            (key-combo-command-execute (kc-get-command "a"))
            (should (string= (buffer-string) "a")))
          (it ()
            (key-combo-command-execute (kc-get-command "a`!!'a"))
            (should (string= (buffer-string) "aa"))
            (should (eq (point) 2)))
          (it ()
            (buffer-enable-undo)
            (key-combo-mode 1)
            (defmock test1 () (interactive) (insert "test1"))
            (defmock test2 () (interactive) (insert "test2"))
            (defmock test3 () (interactive) (insert "test3"))
            ;; (funcall el-spec:example) ;raise error?
            )
          (it ()
            (define-prefix-command 'test-map)
            (global-set-key (kbd "M-s") 'test-map)
            (global-set-key (kbd "M-s z") 'test3)

            (should (string= (key-combo-test-helper-execute "M-s z")
                             "test3"))
            (should (eq (el-spy:called-count 'test1) 0))
            (should (eq (el-spy:called-count 'test2) 0))
            (should (eq (el-spy:called-count 'test3) 1))
            )
          (it ()
	      (define-prefix-command 'test-map)
	      (global-set-key (kbd "M-s") 'test-map)
	      (define-key test-map (kbd "z")
		'test3)
	      (key-combo-define-global (kbd "M-s") 'test1)
	      (key-combo-define-global (kbd "M-s a") 'test2)
	      (it ()
		  (define-prefix-command 'test-map)
		  (global-set-key (kbd "M-s") 'test-map)
		  (global-set-key (kbd "M-s z") 'test3)

		  (define-key global-map
		    (kc-make-key-vector (kbd "M-s")) 'test1)
		  (define-key global-map
		    (kc-make-key-vector (kbd "M-s a")) 'test2)
		  (should (string= (key-combo-test-helper-execute "M-s a")
				   "test2"))
		  (should (eq (el-spy:called-count 'test1) 1))
		  (should (eq (el-spy:called-count 'test2) 1))
		  (should (eq (el-spy:called-count 'test3) 0))
		  )
	      (it ()
		  (define-prefix-command 'test-map)
		  (global-set-key (kbd "M-s") 'test-map)
		  (define-key test-map (kbd "z")
		    'test3)
		  (define-key global-map
		    (kc-make-key-vector (kbd "M-s"))
		    'test1)
		  (define-key global-map
		    (kc-make-key-vector (kbd "M-s a"))
		    'test2)
		  (should (string= (key-combo-test-helper-execute "M-s")
				   "test1"))
		  (should (eq (el-spy:called-count 'test1) 1))
		  (should (eq (el-spy:called-count 'test2) 0))
		  (should (eq (el-spy:called-count 'test3) 0))
		  )
	      (it ()
		  (define-prefix-command 'test-map)
		  (global-set-key (kbd "M-s") 'test-map)
		  (define-key test-map (kbd "z")
		    'test3)
		  (define-key global-map
		    (kc-make-key-vector (kbd "M-s"))
		    'test1)
		  (define-key global-map
		    (kc-make-key-vector (kbd "M-s a"))
		    'test2)
		  (should (string= (key-combo-test-helper-execute "M-s z")
				   "test3"))
		  (should (eq (el-spy:called-count 'test1) 1))
		  (should (eq (el-spy:called-count 'test2) 0))
		  (should (eq (el-spy:called-count 'test3) 1))
		  )
	      (should (string= (key-combo-test-helper-execute "M-s a")
			       "test2"))
	      (should (eq (el-spy:called-count 'test1) 1))
	      (should (eq (el-spy:called-count 'test2) 1))
	      (should (eq (el-spy:called-count 'test3) 0))
	      )
          (it ("multiple prefix")
            ;; "a M-s"
            )
          (it ("multiple prefix2")
            ;; "M-s M-s"
            )
          (it ("define key")
            ;; "M-s M-s"
            )
          )
        (it ()
          (should-error
           (with-mock
             (mock (test1 *) :times 1)
             (key-combo-define-global (kbd "M-C-d") '(test1 test2)))))
        (it ()
          ;; no error
          (with-el-spy
           (defmock test1 () (interactive))
           (defmock test2 () (interactive))
           (key-combo-mode 1)
           (key-combo-define-global (kbd "M-C-d") 'test1)
           (execute-kbd-macro (kbd "M-C-d"))
           ;; (should (eq (el-spy:called-count 'test1) 1))
           ))
        (it ()
          ;; no error
          (with-el-spy
           (defmock test1 () (interactive))
           (defmock test2 () (interactive))
           (key-combo-mode 1)
           (key-combo-define-global (kbd "M-C-d") '(test1 test2))
           (execute-kbd-macro (kbd "M-C-d"))
           ;; (should (eq (el-spy:called-count 'test1) 1))
           ))
        (it ()
          ;; no error
          (with-el-spy
           (defmock test1 () (interactive))
           (defmock test2 () (interactive))
           (key-combo-mode 1)
           (key-combo-define-global (kbd "M-C-d") '(test1 test2))
           (execute-kbd-macro (kbd "M-C-d M-C-d"))
           (should (eq (el-spy:called-count 'test1) 1))
           (should (eq (el-spy:called-count 'test2) 1))
           ))
        (it ()
          (insert ";\n")
          (should-not (kc-in-string-or-comment-p)))
        (context "isearch-mode"
          (it ()
            (insert "=")
            (should (string= (buffer-string) "="))
            (should (eq (point) 2)))
          (it ()
            (insert "=");; not to raise error from isearch-search
            (isearch-mode nil);; backward search
            (execute-kbd-macro "=")
            (should (string= (buffer-string) "="))
            (should (eq (point) 1))))
        (context "execute only"
          (it ()
            (should (string= (key-combo-test-helper-execute "=") "= ")))
          (it ()
            (should (string= (key-combo-test-helper-execute "==") "eq ")))
          (it ()
            (should (string= (key-combo-test-helper-execute ",") ",")))
          (it ()
            (should (string= (key-combo-test-helper-execute ",,") ",,")))
          (it ()
            (should (string= (key-combo-test-helper-execute ".") ".")))
          (it ()
            (should (string= (key-combo-test-helper-execute ". SPC") " . ")))
          (it ()
            (should (string= (key-combo-test-helper-execute ";") ";; ")))
          (it ()
            (should (string= (key-combo-test-helper-execute ";.") ";; .")))
          (it ()
            (should (string= (key-combo-test-helper-execute ";,") ";; ,")))
          (it ()
            (insert ";")
            (should (string= (key-combo-test-helper-execute "=") ";=")))
          )
        (context "with mock"
          (when (require 'el-mock nil t)
            (it ()
              (should-error
               (with-mock
                 (mock (test1 *) :times 1)
                 (key-combo-define-global (kbd "M-C-d") '(test1 test2)))))
            (it ()
              ;; no error
              (with-mock
                (mock (test1 *) :times 1)
                (key-combo-define-global (kbd "M-C-d") '(test1 test2))
                (execute-kbd-macro (kbd "M-C-d"))))
            (it ()
              ;; no error
              (with-mock
                (mock (test1 *) :times 1)
                (mock (test2 *) :times 1)
                (key-combo-define-global (kbd "M-C-d") '(test1 test2))
                (execute-kbd-macro (kbd "M-C-d M-C-d"))))
            (it ()
              ;; no error
              (with-mock
                (mock (define-key * * *) :times 1)
                (key-combo-define-local "a" "a")))
            (it ()
              ;; no error
              (with-mock
                (mock (define-key * * *) :times 1)
                (key-combo-define-local "a" '("a"))))
            (it ()
              ;; no error
              (with-mock
                (mock (define-key * * *) :times 3);; 1 for recursive call?
                (key-combo-define-local "a" '("a" "b"))))
            (it ()
              ;; no error
              (with-mock
                (mock (lookup-key * *) => t :times 2)
                (mock (define-key * * *) :times 2);; 1 for recursive call?
                (key-combo-define-local "a" '("a" "b")))))
          )
        (context "in skk-mode"
          (when (require 'skk-autoloads nil t)
            (before
              (skk-mode 1)
              (setq this-command 'skk-insert)
              (insert ";")
              )
            (it ()
              (should (string= (key-combo-test-helper-execute ",") ";、")))
            (it ()
              (should (string= (key-combo-test-helper-execute ".") ";。")))
            )
          )
        (it ()
          (insert "init:")
          (should (string= (key-combo-test-helper-execute "=") "init:= "))
          (undo -1)
          (should (string= (buffer-string) "init:="))
          (undo-more 1)
          (should (string= (buffer-string) ""))
          )
        (include-examples "C-a")
        (include-examples "check pre-command-hook"))
      (context "in ruby"
        (before
          (key-combo-mode 1)
          (ruby-mode)
          (when (boundp 'auto-complete-mode)
            (auto-complete-mode -1)))
        ;; bug?for auto-complete completion
        (it ()
          (should (string= (key-combo-test-helper-execute ".") ".")))
        (it ()
          (should (string= (key-combo-test-helper-execute ". SPC") " . ")))
        (it ()
          (should (string= (key-combo-test-helper-execute ";") ";; ")))
        (it ()
          (should (string= (key-combo-test-helper-execute ";.") ";; .")))
        (it ()
          (should (string= (key-combo-test-helper-execute ";,") ";; ,")))
        (it ()
          (should (string= (key-combo-test-helper-execute "||=") " ||= "))))
      (context "in c-mode"
        (before
          ;; (key-combo-mode 1)
          (c-mode))
        (context "execute+"
          (it ()
            (should (string= (key-combo-test-helper-execute "+") " + ")))
          (it ()
            (should (string= (key-combo-test-helper-execute "++") "++")))
          ;; (it ()
          ;;   (should (string= (key-description "+") "+")))
          (it ()
            (should (equal (listify-key-sequence "+") '(43))))
          (it ()
            (should (string= (key-description '(?+)) "+")))
          (it ()
            (should (equal (kc-make-key-vector '(?+))
                           ;;(vector 'key-combo (intern (key-description )))
                           [key-combo _+])))
          (it ("a")
            (should (not (null (key-binding
                                (kc-make-key-vector '(?+))
                                )))))
          (it ("c")
            (should (not (null (lookup-key
                                (current-local-map)
                                (kc-make-key-vector '(?+))
                                )))))
          (it ("b")
            (should (not (equal (key-binding
                                 (kc-make-key-vector '(?+)))
                                'key-combo-execute-original))))
          (it ()
            (should (not (null (kc-get-command "+")))))
          (it ()
            (should (not (equal (kc-get-command "+")
                                'key-combo-execute-original))))
          (it ("d")
            (key-combo-define-local "a" nil)
            ;; (key-combo-key-binding "a")
            ;; (key-binding (vector 'key-combo (intern (key-description "a"))))
            ;; accept-default bug?
            (should (eq (lookup-key (current-local-map)
                                    (kc-make-key-vector '(?a)))
                        nil))
            (key-combo-define-local "a" "a")
            (should (not (equal (lookup-key (current-local-map)
                                            (kc-make-key-vector '(?a)))
                                nil)))
            (key-combo-define-local "a" nil)
            )
          )
        (context "undo"
          (before
            (buffer-enable-undo))
          (it ()
            (should (string= (key-combo-test-helper-execute "=") " = ")))
          (it ()
            (should (string= (key-combo-test-helper-execute "=") " = "))
            (undo)
            (should (string= (buffer-string) "="))
            )
          (it ()
            (should (string= (key-combo-test-helper-execute ",") ";、")))
          (it ()
            (should (string= (key-combo-test-helper-execute ".") ";。")))
          )
        )
      (context ("insert & move & execute" :vars (pos pre-string))
        (it ()
          (insert "\"")
          (should (string= (key-combo-test-helper-execute "=") "\"=")))
        (it ()
          (insert ";")
          (should (string= (key-combo-test-helper-execute "=") ";=")))
        (it ()
          (insert ";")
          (should (string= (key-combo-test-helper-execute ",") ";,")))
        (it ()
          (insert ";\n")
          (should (string= (key-combo-test-helper-execute ";") ";\n;; ")))
        (it ()
          (insert ";")
          (should (string= (key-combo-test-helper-execute ".") ";.")))
        (it ()
          (insert "\"\"\n")
          (goto-char 3)
          (should (string= (key-combo-test-helper-execute ".") "\"\".\n")))
        (it ()
          (insert "\"\"a")
          (goto-char 3)
          (should (string= (key-combo-test-helper-execute ".") "\"\".a")))
        (it ()
          (insert "\"\"")
          (goto-char 3)
          (should (string= (key-combo-test-helper-execute ".") "\"\".")))
        (it ()
          (insert "\"\"")
          (goto-char 2)
          (should (string= (key-combo-test-helper-execute ".") "\".\"")))
        (it ()
          (insert "a\"\"")
          (goto-char 2)
          (should (string= (key-combo-test-helper-execute ".") "a.\"\"")))
        )
      (include-examples "C-a")
      (include-examples "check post-command-hook"))
    (context "in ruby"
      (before
        (buffer-enable-undo)
        (key-combo-mode 1)
        (ruby-mode)
        (when (boundp 'auto-complete-mode)
          (auto-complete-mode -1)))
      ;; bug?for auto-complete completion
      (it ()
        (should (string= (key-combo-test-helper-execute ".") ".")))
      (it ()
        (should (string= (key-combo-test-helper-execute "..") "..")))
      (it ()
        (should (string= (key-combo-test-helper-execute "...") "...")))
      (it ()
        (should (string= (key-combo-test-helper-execute "!~") " !~ ")))
      (it ()
        (should (string= (key-combo-test-helper-execute "**") "**")))
      (it ()
        (should (string= (key-combo-test-helper-execute "||=") " ||= "))))
    (context "in c-mode"
      (before
        (buffer-enable-undo)
        ;; (key-combo-mode 1)
        (c-mode))
      (context "execute+"
        (it ()
          (should (string= (key-combo-test-helper-execute "+") " + ")))
        (it ()
          (should (string= (key-combo-test-helper-execute "++") "++")))
        ;; (it ()
        ;;   (should (string= (key-description "+") "+")))
        (it ()
          (should (equal (listify-key-sequence "+") '(43))))
        (it ()
          (should (string= (key-description '(?+)) "+")))
        (it ()
          (should (equal (kc-make-key-vector '(?+))
                         ;;(vector 'key-combo (intern (key-description )))
                         [key-combo _+])))
        (it ("a")
          (should (not (null (key-binding
                              (kc-make-key-vector '(?+))
                              )))))
        (it ("c")
          (should (not (null (lookup-key
                              (current-local-map)
                              (kc-make-key-vector '(?+))
                              )))))
        (it ("b")
          (should (not (equal (key-binding
                               (kc-make-key-vector '(?+)))
                              'key-combo-execute-original))))
        (it ()
          (should (not (null (kc-get-command "+")))))
        (it ()
          (should (not (equal (kc-get-command "+")
                              'key-combo-execute-original))))
        (it ("d")
          (key-combo-define-local "a" nil)
          ;; (key-combo-key-binding "a")
          ;; (key-binding (vector 'key-combo (intern (key-description "a"))))
          ;; accept-default bug?
          (should (eq (lookup-key (current-local-map)
                                  (kc-make-key-vector '(?a)))
                      nil))
          (key-combo-define-local "a" "a")
          (should (not (equal (lookup-key (current-local-map)
                                          (kc-make-key-vector '(?a)))
                              nil)))
          (key-combo-define-local "a" nil)
          )
        (context "funcall"
          ;; (before
          ;;   (key-combo-command-execute (key-combo-key-binding lookup-cmd)))
          (it ()
            (should (string=
                     (key-combo-test-helper-binding-execute "=") " = ")))
          (it ()
            (should (string=
                     (key-combo-test-helper-binding-execute "==") " == ")))
          (it ()
            (should (string=
                     (key-combo-test-helper-binding-execute [?=]) " = ")))
          (it ()
            (should (string=
                     (key-combo-test-helper-binding-execute [?= ?=]) " == ")))
          (it ()
            (should (string=
                     (key-combo-test-helper-binding-execute [?= ?>]) " => ")))
          (it ()
            (should (string=
                     (key-combo-test-helper-binding-execute [?= ?= ?=])
                     " === ")))
          ;; (it ()
          ;;   (funcall (key-combo-key-binding [?= ?= ?= ?=]))
          ;;   (should (string= (buffer-string) " ==== ")))
          (it ()
            (key-combo-define-global (kbd "C-M-h") " == ")
            (key-combo-command-execute (key-combo-key-binding (kbd "C-M-h")))
            (should (equal (buffer-string) " == ")))
          (it ()
            (should-not
             (equal
              (key-combo-lookup-key (current-global-map) (kbd "C-M-h"))
              " == ")))
          ;; (it ()
          ;;   (key-combo-define-global (kbd "C-M-h C-M-h") " === ")
          ;;   (execute-kbd-macro (kbd "C-M-h C-M-h"))
          ;;   (should (string= (buffer-string) " === "))
          ;;   )
          (it ()
            (key-combo-define-global (kbd "C-M-h C-M-h") " === ")
            (key-combo-command-execute
             (key-combo-key-binding (kbd "C-M-h C-M-h")))
            (should (string= (buffer-string) " === "))
            )
          (it ()
            (should-not (key-combo-key-binding [?= ?= ?= ?=])))
          (it ()
            (insert "a  ")
            (should (string= (key-combo-test-helper-execute "=") "a  = "))
            (should (string= (buffer-string) "a  = ")))
          )
        (it ()
          (should (string= (key-combo-test-helper-execute "= C-x u") "=")))
        (it ()
          (should (string= (key-combo-test-helper-execute "== C-x u") " = ")))
        )
      (context "execute"
        (it ()
          (should (string= (key-combo-test-helper-execute "=") " = ")))
        (it ()
          (should (string= (key-combo-test-helper-execute "=*") " =* ")))
        (it ()
          (should (string= (key-combo-test-helper-execute "==") " == ")))
        (it ()
          (should (string= (key-combo-test-helper-execute "===") " === ")))
        (it "loop"
          (should (string= (key-combo-test-helper-execute "====") " = ")))
        (it ()
          (should (string= (key-combo-test-helper-execute "=>=") " => = ")))
        ;; (it ()
        ;; (should (string= (key-combo-test-helper-execute "==!") " ==! ")))
        (it ()
          (should (string= (key-combo-test-helper-execute "=>") " => ")))
        (it ()
          (should (string= (key-combo-test-helper-execute "/") "/")))
        (it ()
          (should (string= (key-combo-test-helper-execute "/ SPC") " / ")))
        (it ()
          (should (string= (key-combo-test-helper-execute "*") "*")))
        (it ()
          (should (string= (key-combo-test-helper-execute "**") "**")))
        (it ()
          (should (string= (key-combo-test-helper-execute "->") "->")))
        (it ()
          (should (string= (key-combo-test-helper-execute ".") ".")))
        ;; todo check position
        (it ()
          (should (string= (key-combo-test-helper-execute "/* RET")
                           "/*\n  \n */")))
        ;; todo depend on indent width
        ;; (it ()
        ;; (should (string= (key-combo-test-helper-execute "{ RET") "{\n  \n}"))
        )
      (context "funcall"
        ;; (before
        ;;   (key-combo-command-execute (key-combo-key-binding lookup-cmd)))
        (it ()
          (should (string=
                   (key-combo-test-helper-execute "=") " = ")))
        (it ()
          (should (string=
                   (key-combo-test-helper-execute "==") " == ")))
        (it ()
          (should (string=
                   (key-combo-test-helper-execute "=>") " => ")))
        (it ()
          (should (string=
                   (key-combo-test-helper-execute "===")
                   " === ")))
        ;; (it ()
        ;;   (funcall (key-combo-key-binding [?= ?= ?= ?=]))
        ;;   (should (string= (buffer-string) " ==== ")))
        ;; (it ()
        ;;   (key-combo-define-global (kbd "C-M-h") " == ")
        ;;   (key-combo-command-execute (key-combo-key-binding (kbd "C-M-h")))
        ;;   (should (equal (buffer-string) " == ")))
        (it ()
          (should-not
           (equal
            (key-combo-lookup-key (current-global-map) (kbd "C-M-h"))
            " == ")))
        ;; (it ()
        ;;   (key-combo-define-global (kbd "C-M-h C-M-h") " === ")
        ;;   (execute-kbd-macro (kbd "C-M-h C-M-h"))
        ;;   (should (string= (buffer-string) " === "))
        ;;   )
        ;; (it ()
        ;;   (key-combo-define-global (kbd "C-M-h C-M-h") " === ")
        ;;   (key-combo-command-execute
        ;;    (key-combo-key-binding (kbd "C-M-h C-M-h")))
        ;;   (should (string= (buffer-string) " === "))
        ;;   )
        (it ()
          (should-not (key-combo-key-binding [?= ?= ?= ?=])))
        (it ()
          (insert "a  ")
          (should (string= (key-combo-test-helper-execute "=") "a  = "))
          (should (string= (buffer-string) "a  = ")))
        )
      )
    ))
